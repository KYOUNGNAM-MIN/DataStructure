using namespace std;
#include <iostream>
class Chain;

class ChainNode {
	friend class Chain;
private:
	int data;
	ChainNode* link;
public:
	ChainNode(int element = 0, ChainNode* next = 0) {
		data = element;
		link = next;
	}
};

class Chain {
private:
	ChainNode* first;
public:
	int Length(); // 책163p 1번 노드 개수
	void Create2();
	void Create7();
	void CreateArr(int* arr);
	void PrintAll();
	void Insert50(ChainNode*); // 노드 삽입
	void Delete(ChainNode*, ChainNode*); // 책163p 2번 x 노드 삭제
	void DeleteAlternate(); // 책163p 3번 짝수 노드만 가리키기
							//책163p 4번 
	Chain Merge(Chain y);	//책163p 5번
	void InsertSort(int k);
	void Reverse();
	
};
template <class T>
void Chain<T>::Reverse()
{
	ChainNode<T> *current = first,
		*previous = 0;
	while (current) {
		ChainNode<T> *r = previous;
		previous = current;
		current = current->link;
		previous->link = r;
	}
	first = previous;
}
void Chain::InsertSort(int k) {
	for (ChainNode* i = first; i != 0; i = i->link) {
		if (i->data < k && k<i->link->data) {
			i->link = new ChainNode(k, i->link);
		}
	}
}
Chain Chain::Merge(Chain y) {
	Chain merge;
	ChainNode *currMerge, *currX, *currY;

	if (first->data < y.first->data) {
		currMerge = merge.first = first;
		currX = first->link;
		currY = y.first;
	}
	else {
		currMerge = merge.first = y.first;
		currX = first;
		currY = y.first->link;
	}

	while (currX&&currY)
		if (currX->data < currY->data) {
			currMerge->link = currX;
			currMerge = currX;
			currX = currX->link;
		}
		else {
			currMerge->link = currY;
			currMerge = currY;
			currY = currY->link;
		}
		if (currX == 0)
			currMerge->link = currY;
		else
			currMerge->link = currX;
		first = y.first = 0;
		
		return merge;
}
int Chain::Length() {
	int count = 0;
	for (ChainNode* i = first; i != 0; i = i->link) {
		count++;
	}
	return count;
}
void Chain::Create2() {
	ChainNode* second = new ChainNode(12, 0);
	first = new ChainNode(2, second);
}
void Chain::Create7() {
	first = new ChainNode(7, 0);
	ChainNode* second = new ChainNode(17, 0);
	first->link = second;
}
void Chain::CreateArr(int* arr) {
	ChainNode* p = 0;
	ChainNode* c = 0;
	for (int i = 0; i < 5; i++) {
		if (i == 0) {
			p = new ChainNode(arr[i], 0);
			first = p;
		}
		else {
			c = new ChainNode(arr[i], 0);
			p->link = c;
			p = c;
		}
	}
}
void Chain::PrintAll() {
	for (ChainNode* i = first; i != 0; i = i->link) {
		cout << i->data << endl;
	}
}
void Chain::Insert50(ChainNode* a) {
	if (first)
		a->link = new ChainNode(50, a->link);
	else
		first = new ChainNode(50);
}
void Chain::Delete(ChainNode* deleteX, ChainNode* preX) {
	if (deleteX == first)
		first = first->link;
	else
		preX->link = deleteX->link;
	delete deleteX;
}
void Chain::DeleteAlternate() {
	if (first) {
		ChainNode* del = first;
		first = first->link;
		delete del;

		for (ChainNode* i = first; i != 0; i = i->link) {
			del = i->link;
			if (del) {
				i->link = del->link;
				delete del;
			}
		}
	}
}